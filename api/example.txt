

from flask import Flask, request, jsonify
import sqlite3
import json, jwt
from flask import Blueprint, request, jsonify, current_app, Response
from flask_restful import Api, Resource # used for REST API building
from datetime import datetime
from auth_middleware import token_required
from model.users import User
import random
from __init__ import app, db, cors
import flask
from model.jobs import Job
from model.jobuser import JobUser
from urllib import parse
from urllib.parse import urlparse
from urllib.parse import parse_qs
from model.messages import Message


# Replace "Message" with SQLAlchemy Message model.
 
message_api = Blueprint('message_api', __name__,
                   url_prefix='/api/message')

# API docs https://flask-restful.readthedocs.io/en/latest/api.html
api = Api(message_api)

class MessageAPI(Resource):
    @token_required("User")
    def post(self, current_user):  # Create a new message
        # Read data from request body
        body = request.get_json()
        
        # Extract message details
        sender_id = body.get('sender_id')
        receiver_id = body.get('receiver_id')
        content = body.get('content')
        # Optionally, you can add more fields like timestamp, etc.

        # Create a new message object
        new_message = Message(sender_id=sender_id, 
                              receiver_id=receiver_id,
                              content=content)

        # Save the new message to the database
        new_message.save()

        # Return the created message details as JSON
        return jsonify(new_message.serialize()), 201

    def get(self):  # Retrieve all messages or messages between specific users
        # Check if sender_id and receiver_id parameters are present in the query string
        sender_id = request.args.get('sender_id')
        receiver_id = request.args.get('receiver_id')

        if sender_id and receiver_id:
            # Retrieve messages between the specified sender and receiver
            messages = Message.query.filter(
                (Message.sender_id == sender_id) & (Message.receiver_id == receiver_id)
            ).all()
        else:
            # Retrieve all messages
            messages = Message.query.all()

        # Convert messages to JSON and return
        return jsonify([message.serialize() for message in messages])

# Add resource to API endpoint
api.add_resource(MessageAPI, '/')


app = Flask(__name__)

# Initialize SQLite database
conn = sqlite3.connect('messaging_system.db')
c = conn.cursor()

# Create tables if they don't exist
c.execute('''CREATE TABLE IF NOT EXISTS conversations (
             id INTEGER PRIMARY KEY,
             name TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS messages (
             id INTEGER PRIMARY KEY,
             conversation_id INTEGER,
             content TEXT,
             FOREIGN KEY(conversation_id) REFERENCES conversations(id))''')

conn.commit()

# Routes
# Load conversations
@app.route('/api/conversations', methods=['GET'])
def get_conversations():
    c.execute("SELECT id, name FROM conversations")
    conversations = c.fetchall()
    return jsonify([{'id': conv[0], 'name': conv[1]} for conv in conversations])

# Load messages for a conversation
@app.route('/api/messages', methods=['GET'])
def get_messages():
    conversation_id = request.args.get('conversationId')
    c.execute("SELECT content FROM messages WHERE conversation_id=?", (conversation_id,))
    messages = c.fetchall()
    return jsonify([{'content': msg[0]} for msg in messages])

# Send a message
@app.route('/api/sendMessage', methods=['POST'])
def send_message():
    data = request.json
    conversation_id = data['conversationId']
    content = data['content']
    c.execute("INSERT INTO messages (conversation_id, content) VALUES (?, ?)", (conversation_id, content))
    conn.commit()
    return '', 204

if __name__ == '__main__':
    app.run(debug=True)
    
    
    
    
# class JobAPI:        
    class _CRUD(Resource):  # User API operation for Create, Read.  THe Update, Delete methods need to be implemeented
        @token_required("Employer")
        def post(self, current_user): # Create method
            ''' Read data for json body '''
            body = request.get_json()
            
            ''' Avoid garbage in, error checking '''
            # validate name
            title = body.get('title')
            description = body.get('description')
            qualification = body.get('qualification')
            pay = body.get('pay')
            field = body.get('field')
            location = body.get('location')
            jobpostee = body.get('jobpostee')
    
            ''' #1: Key code block, setup USER OBJECT '''
            jo = Job(title=title, 
                      description=description,
                      qualification=qualification,
                      pay=pay,
                      field=field,
                      location=location,
                      jobpostee=jobpostee)


            ''' #2: Key Code block to add user to database '''
            # create user in database
            job = jo.create()
            # success returns json of user
            if job:
                return jsonify(title)

            # failure returns error
            return {'message': f'Processed {title}, either a format error or User ID {description} is duplicate'}, 400

        # this method is when users click on specific job(say "IT Help"), and it will return information about it
        def get(self): # Read Method
            
            print(request.url)
            frontendrequest = request.url
            parsed_url = urlparse(frontendrequest)
            print("parsed_url")
            print(parsed_url)
            query_params = parse_qs(parsed_url.query)
            if 'id' in query_params:
                query_id = query_params['id'][0]
                print('query_id')
                print(query_id)
                job = Job.query.filter_by(id=query_id).first()
                if job:
                    return job.read()
                else:
                    return {'message': 'Job not found'}, 404
            else:
                jobs = Job.query.all()    # read/extract all users from database
                json_ready = [job.read() for job in jobs]  # prepare output in json
                return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps



    class _updateJob(Resource):
        def put(self):
            job = Job.query.filter_by(id=request.args.get("id")).first()
            
            body = request.get_json()
            title = body.get('title')
            description = body.get('description')
            qualification = body.get('qualification')
            pay = body.get('pay')
            field = body.get('field')
            location = body.get('location')

            
            updatedJob = job.update(title=title, description=description,qualification=qualification
                                    ,pay=pay, field=field,location=location,   )


            # success returns json of user
            if updatedJob:
                return jsonify(job.read())

            # failure returns error
            return {'message': f'Processed {updatedJob}, format error'}, 400

   
            
            
            
    # adds endpoints
    api.add_resource(_CRUD, '/')
    api.add_resource(_updateJob, '/updatejob')
    
